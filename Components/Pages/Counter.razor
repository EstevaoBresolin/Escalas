@page "/counter"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime


@using Escalas.Components.Services
@using Microsoft.EntityFrameworkCore
@inject AppDbContext DbContext
@inject VoluntarioService VoluntarioService

<h3>Adicionar Voluntário</h3>

<form style="display: flex
;
    flex-direction: column;
    width: 300px;
    gap: 0.5rem;
    margin-bottom: 1rem;" 
    @onsubmit="SalvarVoluntario">

    <input style="border: 1px solid black;padding: 0.5rem;border-radius: 15px;" type="text" @bind="voluntarioEditado.Nome" placeholder="Nome" required />
    <input style="border: 1px solid black;padding: 0.5rem;border-radius: 15px;" type="text" @bind="voluntarioEditado.Contato" placeholder="Contato" />
    <input style="border: 1px solid black;padding: 0.5rem;border-radius: 15px;" type="text" @bind="voluntarioEditado.Funcao" placeholder="Função" />
    <button style="border: 1px solid black;padding: 0.5rem;border-radius: 15px;" type="submit">@((voluntarioEditado.Id == 0) ? "Salvar" : "Atualizar")</button>
</form>

@* <button @onclick="CarregarVoluntarios">Carregar Voluntários</button> *@
    <table style="">
        <tr>
            <td>Nome</td>
            <td>Contato</td>
            <td>Função</td>
            <td></td>
        <td></td>
        </tr>
    @foreach (var voluntario in voluntarios)
        {
            <tr>
                <td>@voluntario.Nome</td>
                <td> @voluntario.Contato</td>
                <td>@voluntario.Funcao</td>
                <td>
                    <button @onclick="() => EditarVoluntario(voluntario)">Editar</button>
                </td>
                <td>
                    <button @onclick="() => ExcluirVoluntario(voluntario.Id)">Excluir</button>
                </td>               
            </tr>
    }
    </table>
   

@code {
    private Voluntario voluntarioEditado = new Voluntario();
    private List<Voluntario> voluntarios = new List<Voluntario>();

    private async Task SalvarVoluntario()
    {
        if (voluntarioEditado.Id == 0)
        {
            await VoluntarioService.SalvarVoluntarioAsync(voluntarioEditado);
        }
        else
        {
            await VoluntarioService.EditarVoluntarioAsync(voluntarioEditado);
        }

        voluntarioEditado = new Voluntario();
        await CarregarVoluntarios();
    }

    private async Task CarregarVoluntarios()
    {
        voluntarios = await VoluntarioService.CarregarVoluntariosAsync();
    }

    private void EditarVoluntario(Voluntario voluntario)
    {
        voluntarioEditado = new Voluntario
        {
                Id = voluntario.Id,
                Nome = voluntario.Nome,
                Contato = voluntario.Contato,
                Funcao = voluntario.Funcao
        };
    }

    private async Task ExcluirVoluntario(int id)
    {
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Você tem certeza que deseja excluir este voluntário?");
        if (confirm)
        {
            await VoluntarioService.ExcluirVoluntarioAsync(id);
            await CarregarVoluntarios();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        voluntarios = await VoluntarioService.CarregarVoluntariosAsync();
    }
}

<style>
    td{
        border: 1px solid black;
        padding: 0.5rem;
    }
</style>