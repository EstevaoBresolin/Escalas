@page "/IndexVoluntario"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject VoluntarioService VoluntarioService
@using Escalas.Components.Services
@using Microsoft.EntityFrameworkCore
@inject NavigationManager navigation

<h3>Voluntários</h3>
<MudButton Style="margin-bottom: 1rem; margin-top: 0.5rem;" OnClick="@(() => navigation.NavigateTo($"/NovoVoluntario"))" Variant="Variant.Filled">Novo</MudButton>


<table style="">
    <tr>
        <td style="font-weight:bold">Nome</td>
        <td style="font-weight:bold">Contato</td>
        <td style="font-weight:bold">Função</td>
        <td></td>
        <td></td>
    </tr>
    @foreach (var voluntario in models)
    {
        <tr>
            <td>@voluntario.Nome</td>
            <td> @voluntario.Contato</td>
            <td>@voluntario.Funcao</td>
            <td>
                <MudButton  OnClick="@(() => navigation.NavigateTo($"/EditarVoluntario/{@voluntario.Id}"))" Variant="Variant.Filled">Editar</MudButton>

            </td>
            <td>
                <MudButton Variant="Variant.Filled" OnClick="@(() => Excluir(voluntario.Id))">Excluir</MudButton>
            </td>
        </tr>
    }
</table>


@code {
    private List<Voluntario> models = new List<Voluntario>();

    protected override async Task OnInitializedAsync()
    {
        models = await VoluntarioService.ObterTodos();
    }

    private async Task Excluir(int id)
    {
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Você tem certeza que deseja excluir este Voluntario?");
        if (confirm)
        {
            await VoluntarioService.Excluir(id);
            models = await VoluntarioService.ObterTodos();
        }
    }
}

<style>
    td {
        border: 1px solid black;
        padding: 0.5rem;
    }
</style>