@page "/IndexInstituicao"
@using Escalas.Components.Classes
@using Escalas.Components.Services
@inject IJSRuntime JSRuntime
@inject NavigationManager navigation
@inject HttpClient Http
@inject InstituicaoService InstituicaoService

<h3>Instituição</h3>
<MudButton Style="margin-bottom: 1rem; margin-top: 0.5rem;" OnClick="@(() => navigation.NavigateTo("/NovoInstituicao"))" Variant="Variant.Filled">Novo</MudButton>


    <table style="">
        <tr>
            <td style="font-weight:bold">Nome</td>
            <td style="font-weight:bold">Contato</td>
            <td></td>
            <td></td>
        </tr>
        @foreach (var context in models)
        {
            <tr>
                <td>@context.Nome</td>
                <td>@context.Contato</td>
                <td>
                    <MudButton OnClick="@(() => navigation.NavigateTo($"/EditarInstituicao/{context.Id}"))" Variant="Variant.Filled">Editar</MudButton>
                </td>
                <td>
                    <MudButton Variant="Variant.Filled" OnClick="@(() => Excluir(context.Id))">Excluir</MudButton>
                </td>
            </tr>
        }
    </table>


@code {
    private List<Instituicao> models = new List<Instituicao>();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        models = await InstituicaoService.ObterTodos();
    }

    private async Task Excluir(int id)
    {
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Você tem certeza que deseja excluir esta instituição?");
        if (confirm)
        {
            await InstituicaoService.Excluir(id);
            models = await InstituicaoService.ObterTodos();
        }
    }
    
}

<style>
    td {
        border: 1px solid black;
        padding: 0.5rem;
    }
</style>
